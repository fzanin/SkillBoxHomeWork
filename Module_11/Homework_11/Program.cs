using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Homework_11
{
    class Program
    {
        static void Main(string[] args)
        {
            // Задание 1.
            // Спроектировать информационную систему позволяющей работать со следующей структурой:
            // Организация, в которой есть департаменты и сотрудники.
            // Наполнение деталями предлагается реализовать самостоятельно
            // Наполнение сотрудниками и департаментами происходит автоматически из файла *.txt, 
            //                                                           предпочтительнее *.xml или *.json 
            //
            // Сотрудники делятся на несколько групп, разделенных должностями и оплатой труда
            // Есть 
            //   сотрудники - управленцы (например: директор, Первй заместитель директора, начальник ведомства, 
            //                                      начальник департамента)
            // 
            //   ОАО "Лучшие кодеры"
            //       Департамент_1
            //          Департамент_11
            //          Департамент_12
            //       Департамент_2
            //          Департамент_21
            //          Департамент_22
            //          Департамент_23
            //          Департамент_24
            //       Департамент_3
            //          Департамент_31
            //       Департамент_4
            //          Департамент_41
            //          Департамент_42
            //          Департамент_43
            //          Департамент_44
            //          Департамент_45
            //          Департамент_46
            //          Департамент_47
            //          Департамент_48
            //       Департамент_5                Начальник_5
            //          Департамент_51            Начальник_51
            //              Департамент_511       Начальник_511
            //                  Департамент_5111  Начальник_5111
            //                        Департамент_51111      Начальник_51111
            //                              Сотрудник 1
            //                              Сотрудник 2
            //                              Сотрудник 3
            //                              Интерн 1
            //                              Интерн 2
            //                        Департамент_51112
            //                        Департамент_51113
            //                        Департамент_51114
            //                  Департамент_5112
            //                  Департамент_5113
            //              Департамент_512
            //          Департамент_52
            //              Департамент_521
            //              Департамент_522
            //              Департамент_523
            //          Департамент_53
            //              Департамент_531
            //          Департамент_54

            //   сотрудники - рабочие
            //   интерны
            // У интернов оплата труда фиксированная и определяется при приёме (например $500 в месяц)
            // У сотрудников - рабочих оплата труда почасовая и определяется при приёме (например $12 в час)
            // У сотрудников - управленцев оплата труда составляет 15% от общей выплаченной суммы всем сотрудникам 
            // числящихся в его отделе, но не менее $1300. 
            //
            // Структура организации следующая:
            // Организация, состоит из ведомств в которые включены департаменты
            // У каждого ведомства и департамента есть свой начальник.
            // Директор руководит Организацией
            // 
            // Реализовать и продемонстрировать работу информационной системы
            // В консоли или с использованием UI

            // * Задание 2
            //
            // Есть код:
            //
            // Ознакомиться с кодом в файле A.cs
            // Реализовать интерфейсы I1, I2 в классе A
            //
            ////// Реализовать интерфейсы I1, I2 в классе B
            //
            // Задание 3.
            // 
            // Задавать вопросы






//            Task
//            Цели домашнего задания
//Научиться пользоваться основными концепциями ООП: инкапсуляцией, наследованием и полиморфизмом.
//Усовершенствовать навыки работы с рекурсивными алгоритмами.
//Научиться использовать интерфейсы.


//Задание 1


//Что нужно сделать
//Для банка «А» необходимо разработать программу консультанта для просмотра данных клиента.
//У консультанта нет прав для изменения или просмотра некоторых данных. Создайте класс, в котором будут содержаться следующие поля:

//              - Фамилия
//              - Имя
//              - Отчество
//              - Номер телефона
//              - Серия, номер паспорта


//Реализуйте методы доступа для следующих ситуаций:

//  - Консультант не имеет доступа к просмотру информации.Вместо серии и номера паспорта он видит символы:
//            «******************», — если поле не пустое.
//  - Консультант не может изменять поля «Фамилия», «Имя», «Отчество», но может их просматривать.
//  - Консультант может изменить «Номер телефона», но при этом поле должно быть всегда заполнено.


//Советы и рекомендации
//  Вы можете использовать как консольное приложение, так и приложение с графическим пользовательским интерфейсом.
//  Укажите типы для данных по своему усмотрению.Также по своему усмотрению решите, где и как будут храниться данные. 



//Что оценивается
//  - Используется инкапсуляция.
//  - Корректное описание данных в классе.
//  - Наличие конструктора в классе.



//Задание 2


//Что нужно сделать
//Расширяем программу из задания 1.У нас есть класс для консультанта со своими методами и полями.
//Добавьте в программу новый класс для нового пользователя — менеджера.

//Менеджер наследует функционал консультанта в дополнение к собственному.
//При этом менеджер может добавлять только «Фамилию», «Имя», «Отчество», «Телефон», «Серию, номер паспорта».



//Советы и рекомендации
//Вы можете использовать как консольное приложение, так и приложение с графическим пользовательским интерфейсом.
//Укажите типы для данных на своё усмотрение, но так, чтобы типы подходили к данным. Также на ваше усмотрение,
//где и как будут храниться данные(рекомендуется текстовый файл с разделителем).Если реализация будет в консольном варианте,
//в таком случае при запуске должен быть выбор, кто работает в системе: консультант или менеджер.Если же будет использован графический интерфейс,
//то в таком случае можно использовать компонент WPF ComboBox.




//Что оценивается
//  - Используется наследование.
//  - Корректное описание данных в классе.
//  - Наличие конструктора в классе.



//Задание 3


//Что нужно сделать
//Расширяем и изменяем программу из задания 1 и 2.У нас есть два класса для консультанта и менеджера. У классов есть метод изменения данных.
//Исходя из этого, добавьте к данным из задания 1 дополнительные поля:

//      - дата и время изменения записи;
//      - какие данные изменены;
//      - тип изменений;
//      - кто изменил данные(консультант или менеджер).

//А также создайте интерфейсы и реализуйте в них методы по изменению существующей записи для консультанта и менеджера.
//Для менеджера разрешите добавление новой записи. Новые поля необходимо заполнять, как только записи клиентов были изменены.
//Теперь консультант может изменять только номер телефона клиента, а менеджер может изменять все данные.



//Советы и рекомендации
//Вы можете использовать как консольное приложение, так и приложение с графическим пользовательским интерфейсом.
//Укажите типы данных на своё усмотрение, но так, чтобы типы подходили к данным.Так же на ваше усмотрение,
//где и как будут храниться данные(рекомендуется текстовый файл с разделителем). Если реализация будет в консольном варианте,
//в таком случае при запуске должен быть выбор, кто работает в системе: консультант или менеджер.Если же будет использован графический интерфейс,
//то в таком случае можно использовать компонент WPF ComboBox.



//Что оценивается
//  - Используется полиморфизм.
//  - Наличие интерфейсов.
//  - Корректное описание данных в классе.
//  - Наличие конструктора в классах.


//Как отправить задание на проверку
//Сдайте работу в одном из этих форматов:

//Проект в архиве ZIP или RAR со всеми файлами.
//Ссылка на архив на Google Диске(или аналогах).
//Ссылка на репозиторий GitHub с исходным кодом домашнего задания.









        }
    }
}
